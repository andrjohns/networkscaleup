// Generated by rstantools.  Do not edit by hand.

/*
    networkscaleup is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    networkscaleup is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with networkscaleup.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_Teo_transmission_error_model_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Teo_transmission_error_model");
    reader.add_event(37, 35, "end", "model_Teo_transmission_error_model");
    return reader;
}
#include <stan_meta_header.hpp>
class model_Teo_transmission_error_model
  : public stan::model::model_base_crtp<model_Teo_transmission_error_model> {
private:
        int N;
        int n_i;
        int n_k;
        int n_known;
        int n_unknown;
        matrix_d x;
        vector_d S_K;
        std::vector<std::vector<int> > y;
public:
    model_Teo_transmission_error_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_Teo_transmission_error_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_Teo_transmission_error_model_namespace::model_Teo_transmission_error_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 0);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "n_i", "int", context__.to_vec());
            n_i = int(0);
            vals_i__ = context__.vals_i("n_i");
            pos__ = 0;
            n_i = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_i", n_i, 0);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "n_k", "int", context__.to_vec());
            n_k = int(0);
            vals_i__ = context__.vals_i("n_k");
            pos__ = 0;
            n_k = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_k", n_k, 0);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "n_known", "int", context__.to_vec());
            n_known = int(0);
            vals_i__ = context__.vals_i("n_known");
            pos__ = 0;
            n_known = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_known", n_known, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "n_unknown", "int", context__.to_vec());
            n_unknown = int(0);
            vals_i__ = context__.vals_i("n_unknown");
            pos__ = 0;
            n_unknown = vals_i__[pos__++];
            check_greater_or_equal(function__, "n_unknown", n_unknown, 0);
            current_statement_begin__ = 8;
            validate_non_negative_index("x", "n_i", n_i);
            validate_non_negative_index("x", "n_unknown", n_unknown);
            context__.validate_dims("data initialization", "x", "matrix_d", context__.to_vec(n_i,n_unknown));
            x = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n_i, n_unknown);
            vals_r__ = context__.vals_r("x");
            pos__ = 0;
            size_t x_j_2_max__ = n_unknown;
            size_t x_j_1_max__ = n_i;
            for (size_t j_2__ = 0; j_2__ < x_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < x_j_1_max__; ++j_1__) {
                    x(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("S_K", "n_known", n_known);
            context__.validate_dims("data initialization", "S_K", "vector_d", context__.to_vec(n_known));
            S_K = Eigen::Matrix<double, Eigen::Dynamic, 1>(n_known);
            vals_r__ = context__.vals_r("S_K");
            pos__ = 0;
            size_t S_K_j_1_max__ = n_known;
            for (size_t j_1__ = 0; j_1__ < S_K_j_1_max__; ++j_1__) {
                S_K(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "S_K", S_K, 0);
            check_less_or_equal(function__, "S_K", S_K, N);
            current_statement_begin__ = 10;
            validate_non_negative_index("y", "n_i", n_i);
            validate_non_negative_index("y", "n_k", n_k);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(n_i,n_k));
            y = std::vector<std::vector<int> >(n_i, std::vector<int>(n_k, int(0)));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = n_i;
            size_t y_k_1_max__ = n_k;
            for (size_t k_1__ = 0; k_1__ < y_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                    y[k_0__][k_1__] = vals_i__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            num_params_r__ += 1;
            current_statement_begin__ = 15;
            validate_non_negative_index("alpha", "n_i", n_i);
            num_params_r__ += n_i;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
            current_statement_begin__ = 17;
            validate_non_negative_index("beta", "n_unknown", n_unknown);
            num_params_r__ += n_unknown;
            current_statement_begin__ = 18;
            num_params_r__ += 1;
            current_statement_begin__ = 19;
            validate_non_negative_index("S_H", "n_unknown", n_unknown);
            num_params_r__ += n_unknown;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_Teo_transmission_error_model() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("lambda")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable lambda missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("lambda");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "lambda", "double", context__.to_vec());
        double lambda(0);
        lambda = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 10, lambda);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable lambda: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        validate_non_negative_index("alpha", "n_i", n_i);
        context__.validate_dims("parameter initialization", "alpha", "vector_d", context__.to_vec(n_i));
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha(n_i);
        size_t alpha_j_1_max__ = n_i;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            alpha(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 10, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 17;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "n_unknown", n_unknown);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(n_unknown));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(n_unknown);
        size_t beta_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 18;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 19;
        if (!(context__.contains_r("S_H")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable S_H missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("S_H");
        pos__ = 0U;
        validate_non_negative_index("S_H", "n_unknown", n_unknown);
        context__.validate_dims("parameter initialization", "S_H", "vector_d", context__.to_vec(n_unknown));
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_H(n_unknown);
        size_t S_H_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
            S_H(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lub_unconstrain(0, N, S_H);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable S_H: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            local_scalar_t__ lambda;
            (void) lambda;  // dummy to suppress unused var warning
            if (jacobian__)
                lambda = in__.scalar_lub_constrain(0, 10, lp__);
            else
                lambda = in__.scalar_lub_constrain(0, 10);
            current_statement_begin__ = 15;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.vector_lb_constrain(0, n_i, lp__);
            else
                alpha = in__.vector_lb_constrain(0, n_i);
            current_statement_begin__ = 16;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lub_constrain(0, 10, lp__);
            else
                tau = in__.scalar_lub_constrain(0, 10);
            current_statement_begin__ = 17;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(n_unknown, lp__);
            else
                beta = in__.vector_constrain(n_unknown);
            current_statement_begin__ = 18;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 19;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> S_H;
            (void) S_H;  // dummy to suppress unused var warning
            if (jacobian__)
                S_H = in__.vector_lub_constrain(0, N, n_unknown, lp__);
            else
                S_H = in__.vector_lub_constrain(0, N, n_unknown);
            // model body
            current_statement_begin__ = 23;
            lp_accum__.add(lognormal_log<propto__>(alpha, 0, tau));
            current_statement_begin__ = 24;
            lp_accum__.add(normal_log<propto__>(beta, 0, (1 / sigma)));
            current_statement_begin__ = 25;
            lp_accum__.add(gamma_log<propto__>(sigma, 1, 0.1));
            current_statement_begin__ = 27;
            for (int k = 1; k <= n_known; ++k) {
                current_statement_begin__ = 28;
                lp_accum__.add(poisson_log<propto__>(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "y"), multiply(multiply(lambda, alpha), get_base1(S_K, k, "S_K", 1))));
            }
            current_statement_begin__ = 31;
            for (int k = 1; k <= n_unknown; ++k) {
                current_statement_begin__ = 32;
                lp_accum__.add(poisson_log<propto__>(stan::model::rvalue(y, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni((n_known + k)), stan::model::nil_index_list())), "y"), multiply(elt_multiply(multiply(lambda, alpha), stan::math::exp(multiply(stan::model::rvalue(x, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_uni(k), stan::model::nil_index_list())), "x"), get_base1(beta, k, "beta", 1)))), get_base1(S_H, k, "S_H", 1))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("lambda");
        names__.push_back("alpha");
        names__.push_back("tau");
        names__.push_back("beta");
        names__.push_back("sigma");
        names__.push_back("S_H");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_i);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_unknown);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n_unknown);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Teo_transmission_error_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double lambda = in__.scalar_lub_constrain(0, 10);
        vars__.push_back(lambda);
        Eigen::Matrix<double, Eigen::Dynamic, 1> alpha = in__.vector_lb_constrain(0, n_i);
        size_t alpha_j_1_max__ = n_i;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            vars__.push_back(alpha(j_1__));
        }
        double tau = in__.scalar_lub_constrain(0, 10);
        vars__.push_back(tau);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(n_unknown);
        size_t beta_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        Eigen::Matrix<double, Eigen::Dynamic, 1> S_H = in__.vector_lub_constrain(0, N, n_unknown);
        size_t S_H_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
            vars__.push_back(S_H(j_1__));
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_Teo_transmission_error_model";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = n_i;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t S_H_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_H" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "lambda";
        param_names__.push_back(param_name_stream__.str());
        size_t alpha_j_1_max__ = n_i;
        for (size_t j_1__ = 0; j_1__ < alpha_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "alpha" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        size_t S_H_j_1_max__ = n_unknown;
        for (size_t j_1__ = 0; j_1__ < S_H_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "S_H" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_Teo_transmission_error_model_namespace::model_Teo_transmission_error_model stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif

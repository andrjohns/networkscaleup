stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Correlated_x_zsubpop,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}
}else{ ## Does include global covariates
if(is.null(z_subpop)){ ## No subpop covariates
## Includes x and zglobal
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
z_global_size = z_global_size,
z_global = z_global,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Correlated_x_zglobal,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}else{
## Includes x, zglobal, and zsubpop
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
z_global_size = z_global_size,
z_global = z_global,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Correlated_x_zsubpop_zglobal,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}
}
}
} else if (model == "uncorrelated") {
if (is.null(x)) { ## No level of respect
if (is.null(z_global)) { ## No global covariates
if(is.null(z_subpop)){ ## No subpop covariates
## Basic model
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_basic,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}else{
## Includes only zsubpop
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_zsubpop,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}
}else{ ## Does include global covariates
if(is.null(z_subpop)){ ## No subpop covariates
## Only global
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
z_global_size = z_global_size,
z_global = z_global,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_zglobal,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}else{
## Includes zglobal and zsubpop
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
z_global_size = z_global_size,
z_global = z_global,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_zsubpop_zglobal,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}
}
} else{ ## Includes x
if (is.null(z_global)) { ## No global covariates
if(is.null(z_subpop)){ ## No subpop covariates
## Only x
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_x,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}else{
## Includes x and z_subpop
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_x_zsubpop,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}
}else{ ## Does include global covariates
if(is.null(z_subpop)){ ## No subpop covariates
## Includes x and zglobal
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
z_global_size = z_global_size,
z_global = z_global,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_x_zglobal,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}else{
## Includes x, zglobal, and zsubpop
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
z_global_size = z_global_size,
z_global = z_global,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
## Fit model
model_fit = rstan::sampling(
object = stanmodels$Uncorrelated_x_zsubpop_zglobal,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin,
...
)
}
}
}
} else{
stop("Invalid model choice")
}
stan_m = rstan::stan_model("./inst/stan/Correlated_x_zsubpop_zglobal.stan")
stan_m = rstan::stan_model("./inst/stan/Correlated_x_zsubpop_zglobal.stan")
stan_m = rstan::stan_model("./inst/stan/Correlated_x_zsubpop_zglobal.stan")
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
z_global_size = z_global_size,
z_global = z_global,
y = ard
)
model_fit = rstan::sampling(
object = ,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin
)
model_fit = rstan::sampling(
object = stan_m,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin
)
stan_m = rstan::stan_model("./inst/stan/Correlated_x_zsubpop_zglobal.stan")
model_fit = rstan::sampling(
object = stan_m,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin
)
z_subpop
z_subpop_size
stan_data = list(
N = N,
n_i = N_i,
n_k = N_k,
x = x,
z_global_size = z_global_size,
z_global = z_global,
z_subpop_size = z_subpop_size,
z_subpop = z_subpop,
y = ard
)
model_fit = rstan::sampling(
object = stan_m,
data = stan_data,
chains = chains,
cores = cores,
iter = iter,
warmup = warmup,
thin = thin
)
draws = rstan::extract(model_fit)
names(draws)
alpha = draws$alpha
summary(alpha)
class(draws)
class(draws$alpha)
class(draws$beta_global)
dim(draws$alpha)
dim(draws$beta_global)
summary(draws$beta_global)
summary(draws$beta_subpop)
plot(draws$beta_global[,1])
z_subpop_size
dim(draws$beta_subpop)
summary(draws$beta_subpop[,1,])
summary(draws$beta_subpop[,2,])
help(scale)
#'
#' pimle.est = killworth(example_dat$ard, known_sizes = example_dat$subpop_sizes[c(1, 2, 4)], known_ind = c(1, 2, 4),
#' N = N, model = "PIMLE)
#'
#' ## Compare estimates with the truth
#' plot(mle.est$degrees, example_dat$degrees)
#'
#' data.frame(true = example_dat$subpop_sizes[c(3, 5)],
#' mle = mle.est$N.est,
#' pimle = pimle.est$N.est)
killworth <-
#'
#' pimle.est = killworth(example_dat$ard, known_sizes = example_dat$subpop_sizes[c(1, 2, 4)], known_ind = c(1, 2, 4),
#' N = N, model = "PIMLE)
#'
#' ## Compare estimates with the truth
#' plot(mle.est$degrees, example_dat$degrees)
#'
#' data.frame(true = example_dat$subpop_sizes[c(3, 5)],
#' mle = mle.est$N.est,
#' pimle = pimle.est$N.est)
killworth <-
function(ard,
known_sizes = NULL,
known_ind = 1:length(known_sizes),
N = NULL,
model = c("MLE", "PIMLE")) {
## Extract dimensions
N_i = nrow(ard) ## Number of respondents
N_k = ncol(ard) ## Number of subpopulations
n_known = length(known_sizes)
n_unknown = N_k - n_known
unknown_ind = (1:N_k)[-known_ind]
if(!(model %in% c("MLE", "PIMLE"))){
stop("model is not one of \'MLE\' or \'PIMLE\'")
}
if(length(known_sizes) != length(known_ind)){
stop("known_sizes and known_ind must the same length")
}
## Estimate degrees
d.est = N * rowSums(ard[,known_ind]) / sum(known_sizes)
if(n_unknown == 1){ ## If only 1 unknown subpopulation
if(model == "MLE"){
N.est = N * sum(ard[,unknown_ind]) / sum(d.est)
}else{
if(min(d.est) == 0){
pos.ind = which(d.est > 0)
warning("Estimated a 0 degree for at least one respondent. Ignoring response for PIMLE")
}else{
pos.ind = 1:N_i
}
N.est = N * mean(ard[pos.ind,unknown_ind] / d.est[pos.ind])
}
}else{ ## If multiple unknown subpopulations
N.est = rep(NA, n_unknown)
if(model == "MLE"){
for(k in 1:n_unknown){
N.est[k] = N * sum(ard[,unknown_ind[k]]) / sum(d.est)
}
}else{
if(min(d.est) == 0){
pos.ind = which(d.est > 0)
warning("Estimated a 0 degree for at least one respondent. Ignoring response for PIMLE")
}else{
pos.ind = 1:N_i
}
for(k in 1:n_unknown){
N.est[k] = N * mean(ard[pos.ind,unknown_ind[k]] / d.est[pos.ind])
}
}
}
return.list = list(degrees = d.est,
sizes = N.est)
return(return.list)
}
mle.est = killworth(
example_dat$ard,
known_sizes = example_dat$subpop_sizes[c(1, 2, 4)],
known_ind = c(1, 2, 4),
N = N,
model = "MLE")
mle.est = killworth(
example_data$ard,
known_sizes = example_dat$subpop_sizes[c(1, 2, 4)],
known_ind = c(1, 2, 4),
N = N,
model = "MLE")
mle.est = killworth(
example_data$ard,
known_sizes = example_data$subpop_sizes[c(1, 2, 4)],
known_ind = c(1, 2, 4),
N = N,
model = "MLE")
mle.est = killworth(
example_data$ard,
known_sizes = example_data$subpop_sizes[c(1, 2, 4)],
known_ind = c(1, 2, 4),
N = N,
model = "MLE"
)
pimle.est = killworth(
example_data$ard,
known_sizes = example_data$subpop_sizes[c(1, 2, 4)],
known_ind = c(1, 2, 4),
N = N,
model = "PIMLE"
)
## Compare estimates with the truth
plot(mle.est$degrees, example_dat$degrees)
## Compare estimates with the truth
plot(mle.est$degrees, example_data$degrees)
data.frame(
true = example_data$subpop_sizes[c(3, 5)],
mle = mle.est$N.est,
pimle = pimle.est$N.est
)
mle.est$N.est
pimle.est$N.est
mle.est
data.frame(
true = example_data$subpop_sizes[c(3, 5)],
mle = mle.est$sizes,
pimle = pimle.est$sizes
)
class(model_fit)
ind = 100
iter = 1500
cat(c("Iteration: ", ind, " / ", iter, " [", round(ind / iter), "%]"))
cat("Iteration: ", ind, " / ", iter, " [", round(ind / iter), "%]")
help(cat)
cat("Iteration: ", ind, " / ", iter, " [", round(ind / iter), "%]", sep = "")
cat("Iteration: ", ind, " / ", iter, " [", round(ind / iter * 100), "%]", sep = "")
nrow(rho)
nrow(draws$rho)
dim(draws$rho)
class(draws)
class(draws$rho)
class(matrix(NA, 3 4))
class(matrix(NA, 3, 4))
help(extract)
help(scaling)
??scaling
stop("G1_ind cannot be null for scaling option \"overdispersed\"")
stop("G1_ind cannot be null for scaling option \'overdispersed\'")
## Perform scaling procedure
logdi = draws$logdi
sigma_di = draws$sigma_di
degrees = matrix(NA, nrow = nrow(logdi), ncol = ncol(logdi))
dim(logdi)
dim(sigma_di)
length(sigma_di)
logdi[i,] * sigma_di[i]
degrees = matrix(NA, nrow = nrow(logdi), ncol = ncol(logdi))
for(i in 1:nrow(degrees)){
degrees[i,] = logdi[i,] * sigma_di[i]
}
plot(logdi[,1])
plot(degrees[,1])
## First get point estimate for correlation matrix
Correlation = draws$Corr
dim(Correlation)
Correlation = apply(Correlation, c(2, 3), mean)
dim(Correlation)
Correlation
devtools::load_all()
pkgbuild::compile_dll()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
roxygen2::roxygenize()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
pkgbuild::compile_dll()
roxygen2::roxygenize()
devtools::document()
